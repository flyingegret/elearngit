【git install】

在Linux上
首先，你可以试着输入git，看看系统有没有安装Git：

$ git
The program 'git' is currently not installed. You can install it by typing:
sudo apt-get install git
像上面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。

在Mac OS X上
直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”->“Preferences”，
在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。

【git config】

下面的配置 本级所有的git仓库都会使用该配置
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
下面的命令 可查看当前全局配置
$ git config [--global] user.name
$ git config [—global] user.email

如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。

下面的命令用于初始化创建的本地版本库
$ git init 

【git command】
$ git add filename #添加到暂存区
$ git rm用于删除一个文件
$ git commit -m “commit info” #提交到当前分支
$ git status #查看当前版本状态
$ git diff #查看具体修改内容 Mac上Q键退出diff状态
$ git log [--pretty=oneline#方便查看]#查看提交历史记录
$ git log —-graph #可查看到分支合并图 可q键退出log状态
$ git reset --hard HEAD^ #回退到上一版本
$ git reset --hard HEAD^^ #回退到上上一版本
$ git reset --hard HEAD～ #回退到前100版本
$ git reset --hard 3628164 #按此处的commit id 前进到该版本
$ git reflog用来记录你的每一次命令

工作区：当前项目所在位置 版本库：对应.git文件 .git—>index：暂存区 .git—>refs—>master：本地主分支 HEAD:指针
git 跟踪的是修改 而不是文件

【git backup】
git checkout -- elearngit.txt 意思就是，把elearngit.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是elearngit.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是elearngit.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，
      就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库

【git Hub】
$ ssh-keygen -t rsa -C "youremail@example.com" #创建ssh key
## git Hub[git服务器端] 没有对应电脑端ssh key 公钥 则当前电脑将不能推送修改
下面命令将添加远程仓库 git@github.com:flyingegret/elearngit.git 同本地仓库的关联 尔后 远程库的名字是orgin
$ git remote add origin git@github.com:flyingegret/elearngit.git

下面的命令将本地仓库的所有内容推送到远程
$ git push -u[远程仓库为空时使用] origin master

下面的命令将移除http的origin
git remote rm origin
下面的命令将添加新的git方式的origin  如此每次push将不再需要name&password
$ git remote add origin git@github.com:flyingegret/elearngit.git

【git branch】
$ git checkout -b dev #git checkout命令加上-b参数表示创建并切换
$ git branch [branch name]#创建分支
$ git checkout [branch name] #切换分支
$ git branch #查看当前分支
$ git checkout master #切换到master 分支
$ git merge dev #合并dev分支到 当前所在分支
$ git branch -d dev #删除dev分支


输入错误命令行后 ctrl+z退出即可

下面的命令可从分支上看出信息
$ git merge --no-ff -m "merge with no-ff" dev #合并分支dev 不采用fast forward策略；
                                               因为本次会创建一个新的commit 所以加入 -m
分支管理策略，master保持稳定 各开发人员在其dev分支进行工作
bug分支
$ git stash #可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
$ git stash list #查看存储的工作现场列表
$ git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
$ git stash pop 回复的同时 删除stash内容

大大



